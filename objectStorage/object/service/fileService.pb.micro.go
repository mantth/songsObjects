// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: fileService.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FileService service

type FileService interface {
	FileUpload(ctx context.Context, in *FileBinary, opts ...client.CallOption) (*FileResponse, error)
	FileDownload(ctx context.Context, in *FileRequest, opts ...client.CallOption) (FileService_FileDownloadService, error)
	FileExist(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "service"
	}
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) FileUpload(ctx context.Context, in *FileBinary, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.FileUpload", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) FileDownload(ctx context.Context, in *FileRequest, opts ...client.CallOption) (FileService_FileDownloadService, error) {
	req := c.c.NewRequest(c.name, "FileService.FileDownload", &FileRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &fileServiceFileDownload{stream}, nil
}

type FileService_FileDownloadService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*FileBinary, error)
}

type fileServiceFileDownload struct {
	stream client.Stream
}

func (x *fileServiceFileDownload) Close() error {
	return x.stream.Close()
}

func (x *fileServiceFileDownload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileServiceFileDownload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileServiceFileDownload) Recv() (*FileBinary, error) {
	m := new(FileBinary)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileService) FileExist(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.FileExist", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceHandler interface {
	FileUpload(context.Context, *FileBinary, *FileResponse) error
	FileDownload(context.Context, *FileRequest, FileService_FileDownloadStream) error
	FileExist(context.Context, *FileRequest, *FileResponse) error
}

func RegisterFileServiceHandler(s server.Server, hdlr FileServiceHandler, opts ...server.HandlerOption) error {
	type fileService interface {
		FileUpload(ctx context.Context, in *FileBinary, out *FileResponse) error
		FileDownload(ctx context.Context, stream server.Stream) error
		FileExist(ctx context.Context, in *FileRequest, out *FileResponse) error
	}
	type FileService struct {
		fileService
	}
	h := &fileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileService{h}, opts...))
}

type fileServiceHandler struct {
	FileServiceHandler
}

func (h *fileServiceHandler) FileUpload(ctx context.Context, in *FileBinary, out *FileResponse) error {
	return h.FileServiceHandler.FileUpload(ctx, in, out)
}

func (h *fileServiceHandler) FileDownload(ctx context.Context, stream server.Stream) error {
	m := new(FileRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FileServiceHandler.FileDownload(ctx, m, &fileServiceFileDownloadStream{stream})
}

type FileService_FileDownloadStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*FileBinary) error
}

type fileServiceFileDownloadStream struct {
	stream server.Stream
}

func (x *fileServiceFileDownloadStream) Close() error {
	return x.stream.Close()
}

func (x *fileServiceFileDownloadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileServiceFileDownloadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileServiceFileDownloadStream) Send(m *FileBinary) error {
	return x.stream.Send(m)
}

func (h *fileServiceHandler) FileExist(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.FileExist(ctx, in, out)
}
