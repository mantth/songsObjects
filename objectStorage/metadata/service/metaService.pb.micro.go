// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: metaService.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MetaService service

type MetaService interface {
	GetVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error)
	DelVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error)
	PutVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error)
	GetLatestVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error)
}

type metaService struct {
	c    client.Client
	name string
}

func NewMetaService(name string, c client.Client) MetaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "service"
	}
	return &metaService{
		c:    c,
		name: name,
	}
}

func (c *metaService) GetVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error) {
	req := c.c.NewRequest(c.name, "MetaService.GetVersion", in)
	out := new(MetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) DelVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error) {
	req := c.c.NewRequest(c.name, "MetaService.DelVersion", in)
	out := new(MetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) PutVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error) {
	req := c.c.NewRequest(c.name, "MetaService.PutVersion", in)
	out := new(MetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) GetLatestVersion(ctx context.Context, in *MetaRequest, opts ...client.CallOption) (*MetaResponse, error) {
	req := c.c.NewRequest(c.name, "MetaService.GetLatestVersion", in)
	out := new(MetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetaService service

type MetaServiceHandler interface {
	GetVersion(context.Context, *MetaRequest, *MetaResponse) error
	DelVersion(context.Context, *MetaRequest, *MetaResponse) error
	PutVersion(context.Context, *MetaRequest, *MetaResponse) error
	GetLatestVersion(context.Context, *MetaRequest, *MetaResponse) error
}

func RegisterMetaServiceHandler(s server.Server, hdlr MetaServiceHandler, opts ...server.HandlerOption) error {
	type metaService interface {
		GetVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error
		DelVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error
		PutVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error
		GetLatestVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error
	}
	type MetaService struct {
		metaService
	}
	h := &metaServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MetaService{h}, opts...))
}

type metaServiceHandler struct {
	MetaServiceHandler
}

func (h *metaServiceHandler) GetVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error {
	return h.MetaServiceHandler.GetVersion(ctx, in, out)
}

func (h *metaServiceHandler) DelVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error {
	return h.MetaServiceHandler.DelVersion(ctx, in, out)
}

func (h *metaServiceHandler) PutVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error {
	return h.MetaServiceHandler.PutVersion(ctx, in, out)
}

func (h *metaServiceHandler) GetLatestVersion(ctx context.Context, in *MetaRequest, out *MetaResponse) error {
	return h.MetaServiceHandler.GetLatestVersion(ctx, in, out)
}
